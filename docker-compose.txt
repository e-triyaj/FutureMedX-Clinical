version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: futuremedx_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-futuremedx_clinical}
      POSTGRES_USER: ${DB_USER:-futuremedx_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/setup/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - futuremedx_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-futuremedx_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for Session Store
  mongodb:
    image: mongo:6.0
    container_name: futuremedx_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongo_secure_password}
      MONGO_INITDB_DATABASE: futuremedx_sessions
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - futuremedx_network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: futuremedx_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - futuremedx_network

  # Node.js Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: futuremedx_backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${API_PORT:-5000}
      DB_HOST: postgres
      MONGO_URI: mongodb://admin:${MONGO_PASSWORD:-mongo_secure_password}@mongodb:27017/futuremedx_sessions?authSource=admin
      REDIS_HOST: redis
      AI_ENGINE_URL: http://ai-engine:8000
    ports:
      - "${API_PORT:-5000}:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./data:/data
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - futuremedx_network
    command: npm run dev

  # Python AI Engine
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    container_name: futuremedx_ai_engine
    environment:
      PYTHONUNBUFFERED: 1
      PORT: ${AI_ENGINE_PORT:-8000}
      MODEL_PATH: /app/models
    ports:
      - "${AI_ENGINE_PORT:-8000}:8000"
    volumes:
      - ./ai-engine:/app
      - ./data:/data
      - ai_models:/app/models
    networks:
      - futuremedx_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    command: python main.py

  # Frontend Web Server
  frontend:
    image: nginx:alpine
    container_name: futuremedx_frontend
    ports:
      - "${PORT:-3000}:80"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - futuremedx_network

  # PgAdmin for Database Management (Development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: futuremedx_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@futuremedx.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_password}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - futuremedx_network
    profiles:
      - dev

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: futuremedx_prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - futuremedx_network
    profiles:
      - monitoring

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: futuremedx_grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    networks:
      - futuremedx_network
    profiles:
      - monitoring

  # Jupyter Notebook for ML Development
  jupyter:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile.jupyter
    container_name: futuremedx_jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./ai-engine:/app
      - ./data:/data
      - jupyter_notebooks:/notebooks
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    networks:
      - futuremedx_network
    profiles:
      - ml-dev

networks:
  futuremedx_network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  pgadmin_data:
  ai_models:
  prometheus_data:
  grafana_data:
  jupyter_notebooks: